{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":90274,"databundleVersionId":10995111,"sourceType":"competition"}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-05T01:57:28.822669Z","iopub.execute_input":"2025-02-05T01:57:28.822938Z","iopub.status.idle":"2025-02-05T01:57:30.048879Z","shell.execute_reply.started":"2025-02-05T01:57:28.822911Z","shell.execute_reply":"2025-02-05T01:57:30.047758Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e2/sample_submission.csv\n/kaggle/input/playground-series-s5e2/train.csv\n/kaggle/input/playground-series-s5e2/test.csv\n/kaggle/input/playground-series-s5e2/training_extra.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/playground-series-s5e2/train.csv', index_col=['id'])\ntest = pd.read_csv('/kaggle/input/playground-series-s5e2/test.csv', index_col=['id'])\n\ntrain.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-05T02:04:06.164651Z","iopub.execute_input":"2025-02-05T02:04:06.164989Z","iopub.status.idle":"2025-02-05T02:04:06.869173Z","shell.execute_reply.started":"2025-02-05T02:04:06.164964Z","shell.execute_reply":"2025-02-05T02:04:06.868045Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"           Brand Material    Size  Compartments Laptop Compartment Waterproof  \\\nid                                                                              \n0       Jansport  Leather  Medium           7.0                Yes         No   \n1       Jansport   Canvas   Small          10.0                Yes        Yes   \n2   Under Armour  Leather   Small           2.0                Yes         No   \n3           Nike    Nylon   Small           8.0                Yes         No   \n4         Adidas   Canvas  Medium           1.0                Yes        Yes   \n\n        Style  Color  Weight Capacity (kg)      Price  \nid                                                     \n0        Tote  Black             11.611723  112.15875  \n1   Messenger  Green             27.078537   68.88056  \n2   Messenger    Red             16.643760   39.17320  \n3   Messenger  Green             12.937220   80.60793  \n4   Messenger  Green             17.749338   86.02312  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Brand</th>\n      <th>Material</th>\n      <th>Size</th>\n      <th>Compartments</th>\n      <th>Laptop Compartment</th>\n      <th>Waterproof</th>\n      <th>Style</th>\n      <th>Color</th>\n      <th>Weight Capacity (kg)</th>\n      <th>Price</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Jansport</td>\n      <td>Leather</td>\n      <td>Medium</td>\n      <td>7.0</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Tote</td>\n      <td>Black</td>\n      <td>11.611723</td>\n      <td>112.15875</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jansport</td>\n      <td>Canvas</td>\n      <td>Small</td>\n      <td>10.0</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Messenger</td>\n      <td>Green</td>\n      <td>27.078537</td>\n      <td>68.88056</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Under Armour</td>\n      <td>Leather</td>\n      <td>Small</td>\n      <td>2.0</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Messenger</td>\n      <td>Red</td>\n      <td>16.643760</td>\n      <td>39.17320</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Nike</td>\n      <td>Nylon</td>\n      <td>Small</td>\n      <td>8.0</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Messenger</td>\n      <td>Green</td>\n      <td>12.937220</td>\n      <td>80.60793</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adidas</td>\n      <td>Canvas</td>\n      <td>Medium</td>\n      <td>1.0</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Messenger</td>\n      <td>Green</td>\n      <td>17.749338</td>\n      <td>86.02312</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"train.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-05T02:04:28.783651Z","iopub.execute_input":"2025-02-05T02:04:28.784012Z","iopub.status.idle":"2025-02-05T02:04:28.898437Z","shell.execute_reply.started":"2025-02-05T02:04:28.783986Z","shell.execute_reply":"2025-02-05T02:04:28.897327Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 300000 entries, 0 to 299999\nData columns (total 10 columns):\n #   Column                Non-Null Count   Dtype  \n---  ------                --------------   -----  \n 0   Brand                 290295 non-null  object \n 1   Material              291653 non-null  object \n 2   Size                  293405 non-null  object \n 3   Compartments          300000 non-null  float64\n 4   Laptop Compartment    292556 non-null  object \n 5   Waterproof            292950 non-null  object \n 6   Style                 292030 non-null  object \n 7   Color                 290050 non-null  object \n 8   Weight Capacity (kg)  299862 non-null  float64\n 9   Price                 300000 non-null  float64\ndtypes: float64(3), object(7)\nmemory usage: 25.2+ MB\n","output_type":"stream"}],"execution_count":13},{"cell_type":"markdown","source":"*Create a pairplot*","metadata":{}},{"cell_type":"markdown","source":"*Get numeric columns and categorical columns*","metadata":{}},{"cell_type":"code","source":"num_cols = train.select_dtypes(include=['number'])\ncat_cols = train.select_dtypes(include=['object'])\ncat_cols","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-05T02:21:36.643285Z","iopub.execute_input":"2025-02-05T02:21:36.643681Z","iopub.status.idle":"2025-02-05T02:21:36.682459Z","shell.execute_reply.started":"2025-02-05T02:21:36.643650Z","shell.execute_reply":"2025-02-05T02:21:36.680997Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"               Brand Material    Size Laptop Compartment Waterproof  \\\nid                                                                    \n0           Jansport  Leather  Medium                Yes         No   \n1           Jansport   Canvas   Small                Yes        Yes   \n2       Under Armour  Leather   Small                Yes         No   \n3               Nike    Nylon   Small                Yes         No   \n4             Adidas   Canvas  Medium                Yes        Yes   \n...              ...      ...     ...                ...        ...   \n299995        Adidas  Leather   Small                 No         No   \n299996      Jansport  Leather   Large                 No        Yes   \n299997          Puma   Canvas   Large                Yes        Yes   \n299998        Adidas    Nylon   Small                 No        Yes   \n299999  Under Armour   Canvas   Small                 No        Yes   \n\n            Style  Color  \nid                        \n0            Tote  Black  \n1       Messenger  Green  \n2       Messenger    Red  \n3       Messenger  Green  \n4       Messenger  Green  \n...           ...    ...  \n299995       Tote   Blue  \n299996       Tote   Blue  \n299997   Backpack   Pink  \n299998       Tote   Pink  \n299999   Backpack  Black  \n\n[300000 rows x 7 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Brand</th>\n      <th>Material</th>\n      <th>Size</th>\n      <th>Laptop Compartment</th>\n      <th>Waterproof</th>\n      <th>Style</th>\n      <th>Color</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Jansport</td>\n      <td>Leather</td>\n      <td>Medium</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Tote</td>\n      <td>Black</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jansport</td>\n      <td>Canvas</td>\n      <td>Small</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Messenger</td>\n      <td>Green</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Under Armour</td>\n      <td>Leather</td>\n      <td>Small</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Messenger</td>\n      <td>Red</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Nike</td>\n      <td>Nylon</td>\n      <td>Small</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Messenger</td>\n      <td>Green</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adidas</td>\n      <td>Canvas</td>\n      <td>Medium</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Messenger</td>\n      <td>Green</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>299995</th>\n      <td>Adidas</td>\n      <td>Leather</td>\n      <td>Small</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Tote</td>\n      <td>Blue</td>\n    </tr>\n    <tr>\n      <th>299996</th>\n      <td>Jansport</td>\n      <td>Leather</td>\n      <td>Large</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Tote</td>\n      <td>Blue</td>\n    </tr>\n    <tr>\n      <th>299997</th>\n      <td>Puma</td>\n      <td>Canvas</td>\n      <td>Large</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Backpack</td>\n      <td>Pink</td>\n    </tr>\n    <tr>\n      <th>299998</th>\n      <td>Adidas</td>\n      <td>Nylon</td>\n      <td>Small</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Tote</td>\n      <td>Pink</td>\n    </tr>\n    <tr>\n      <th>299999</th>\n      <td>Under Armour</td>\n      <td>Canvas</td>\n      <td>Small</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Backpack</td>\n      <td>Black</td>\n    </tr>\n  </tbody>\n</table>\n<p>300000 rows × 7 columns</p>\n</div>"},"metadata":{}}],"execution_count":25},{"cell_type":"markdown","source":"*Seperate categorical columns into ordinal (to be ordinal encoded) and non-ordinal (to be one-hot encoded)*","metadata":{}},{"cell_type":"markdown","source":"# TODO: Try changing the ordinal and non-ordinal columns around","metadata":{}},{"cell_type":"code","source":"ord_cols = cat_cols[['Size', 'Laptop Compartment', 'Waterproof']]\noh_cols = cat_cols[['Brand', 'Material', 'Style', 'Color']]\noh_cols","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-05T02:25:57.521821Z","iopub.execute_input":"2025-02-05T02:25:57.522245Z","iopub.status.idle":"2025-02-05T02:25:57.551821Z","shell.execute_reply.started":"2025-02-05T02:25:57.522184Z","shell.execute_reply":"2025-02-05T02:25:57.550542Z"}},"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"               Brand Material      Style  Color\nid                                             \n0           Jansport  Leather       Tote  Black\n1           Jansport   Canvas  Messenger  Green\n2       Under Armour  Leather  Messenger    Red\n3               Nike    Nylon  Messenger  Green\n4             Adidas   Canvas  Messenger  Green\n...              ...      ...        ...    ...\n299995        Adidas  Leather       Tote   Blue\n299996      Jansport  Leather       Tote   Blue\n299997          Puma   Canvas   Backpack   Pink\n299998        Adidas    Nylon       Tote   Pink\n299999  Under Armour   Canvas   Backpack  Black\n\n[300000 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Brand</th>\n      <th>Material</th>\n      <th>Style</th>\n      <th>Color</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Jansport</td>\n      <td>Leather</td>\n      <td>Tote</td>\n      <td>Black</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jansport</td>\n      <td>Canvas</td>\n      <td>Messenger</td>\n      <td>Green</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Under Armour</td>\n      <td>Leather</td>\n      <td>Messenger</td>\n      <td>Red</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Nike</td>\n      <td>Nylon</td>\n      <td>Messenger</td>\n      <td>Green</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adidas</td>\n      <td>Canvas</td>\n      <td>Messenger</td>\n      <td>Green</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>299995</th>\n      <td>Adidas</td>\n      <td>Leather</td>\n      <td>Tote</td>\n      <td>Blue</td>\n    </tr>\n    <tr>\n      <th>299996</th>\n      <td>Jansport</td>\n      <td>Leather</td>\n      <td>Tote</td>\n      <td>Blue</td>\n    </tr>\n    <tr>\n      <th>299997</th>\n      <td>Puma</td>\n      <td>Canvas</td>\n      <td>Backpack</td>\n      <td>Pink</td>\n    </tr>\n    <tr>\n      <th>299998</th>\n      <td>Adidas</td>\n      <td>Nylon</td>\n      <td>Tote</td>\n      <td>Pink</td>\n    </tr>\n    <tr>\n      <th>299999</th>\n      <td>Under Armour</td>\n      <td>Canvas</td>\n      <td>Backpack</td>\n      <td>Black</td>\n    </tr>\n  </tbody>\n</table>\n<p>300000 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":29},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OrdinalEncoder, OneHotEncoder\n\nnumerical_transformer = SimpleImputer(strategy='median')\n\nordinal_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('ord', OrdinalEncoder())\n])\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorrelation_matrix = train.corr()\nplt.figure(figzie=(8,6))\nsns.heatmap(correlation_matrix)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-05T02:34:12.007857Z","iopub.execute_input":"2025-02-05T02:34:12.008173Z","iopub.status.idle":"2025-02-05T02:34:12.035262Z","shell.execute_reply.started":"2025-02-05T02:34:12.008149Z","shell.execute_reply":"2025-02-05T02:34:12.033890Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-5681f77bf2c6>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mcorrelation_matrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigzie\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorrelation_matrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mcorr\u001b[0;34m(self, method, min_periods, numeric_only)\u001b[0m\n\u001b[1;32m  11047\u001b[0m         \u001b[0mcols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11048\u001b[0m         \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcols\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m> 11049\u001b[0;31m         \u001b[0mmat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m  11050\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11051\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"pearson\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mto_numpy\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1991\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1992\u001b[0m             \u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1993\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1994\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1995\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mas_array\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1692\u001b[0m                 \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriteable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1693\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1694\u001b[0;31m             \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interleave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1695\u001b[0m             \u001b[0;31m# The underlying data was copied within _interleave, so no need\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1696\u001b[0m             \u001b[0;31m# to further copy if copy=True or setting na_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m_interleave\u001b[0;34m(self, dtype, na_value)\u001b[0m\n\u001b[1;32m   1751\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1752\u001b[0m                 \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mblk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1753\u001b[0;31m             \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1754\u001b[0m             \u001b[0mitemmask\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1755\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'Jansport'"],"ename":"ValueError","evalue":"could not convert string to float: 'Jansport'","output_type":"error"}],"execution_count":32}]}